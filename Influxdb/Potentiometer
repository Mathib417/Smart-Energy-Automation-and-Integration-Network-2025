#if defined(ESP32)
#include <WiFiMulti.h>
WiFiMulti wifiMulti;
#define DEVICE "ESP32"
#elif defined(ESP8266)
#include <ESP8266WiFiMulti.h>
ESP8266WiFiMulti wifiMulti;
#define DEVICE "ESP8266"
#endif


#include <InfluxDbClient.h>
#include <InfluxDbCloud.h>

#define WIFI_SSID "Galaxy A12 E1A1"                                                                                        //Network Name
#define WIFI_PASSWORD "ewvd8037"
#define INFLUXDB_URL "https://us-east-1-1.aws.cloud2.influxdata.com"
#define INFLUXDB_TOKEN "kBLLkVYJr_s0oz0bqfnZDFk8AH-Kp8P56uwqWeZWfgJs7WV1HfHknQpyDMiXJbsqaReU_AOxtdq2MB6_sFol7w=="
#define INFLUXDB_ORG "8016ae0a3fa30f7e"
#define INFLUXDB_BUCKET "Bucket1"

// Time zone info
#define TZ_INFO "UTC5.5"

// Declare InfluxDB client instance with preconfigured InfluxCloud certificate
InfluxDBClient client(INFLUXDB_URL, INFLUXDB_ORG, INFLUXDB_BUCKET, INFLUXDB_TOKEN, InfluxDbCloud2CACert);

// Declare Data point
Point sensor("Inverters");

// Define the analog pin where the potentiometer is connected
const int potPin = A0;  // You can change this if using a different analog pin
int previousVal;
void setup() {
  Serial.begin(9600);  // Start serial communication at 9600 baud
  previousVal = analogRead(potPin);

    // Setup wifi
  WiFi.mode(WIFI_STA);
  wifiMulti.addAP(WIFI_SSID, WIFI_PASSWORD);

  Serial.print("Connecting to wifi");
  while (wifiMulti.run() != WL_CONNECTED) {
    Serial.print(".");
    delay(100);
  }
  Serial.println();

  // Accurate time is necessary for certificate validation and writing in batches
  // We use the NTP servers in your area as provided by: https://www.pool.ntp.org/zone/
  // Syncing progress and the time will be printed to Serial.
  timeSync(TZ_INFO, "pool.ntp.org", "time.nis.gov");


  // Check server connection
  if (client.validateConnection()) {
    Serial.print("Connected to InfluxDB: ");
    Serial.println(client.getServerUrl());
  } else {
    Serial.print("InfluxDB connection failed: ");
    Serial.println(client.getLastErrorMessage());
  }

  // Add tags to the data point
  sensor.addTag("Inverter_ID", "5");
  /*sensor.addTag("SSID", WiFi.SSID());*/
}

void loop() {
  int potValue = analogRead(potPin);  // Read the potentiometer value (0 to 1023)
  Serial.println(potValue);           // Print the value to the Serial Monitor
  
  if(abs(potValue - previousVal) > 10 ){
    previousVal = potValue;
    Serial.println(" Changed");
    sensor.clearFields();
    sensor.addField("Voltage", 1);
    Serial.print("Writing: ");
    Serial.println(sensor.toLineProtocol());
  }else{
    sensor.clearFields();
    sensor.addField("Voltage", 0);
    Serial.print("Writing: ");
    Serial.println(sensor.toLineProtocol());
  }
  //delay(100);                         // Small delay for readability
    // Check WiFi connection and reconnect if needed
  if (wifiMulti.run() != WL_CONNECTED) {
    Serial.println("Wifi connection lost");
  }

  // Write point
  if (!client.writePoint(sensor)) {
    Serial.print("InfluxDB write failed: ");
    Serial.println(client.getLastErrorMessage());
  }

  Serial.println("Waiting 1 second");
  //delay(100);
}
